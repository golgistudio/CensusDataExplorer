// Generated by CoffeeScript 1.8.0

//  http://vallandingham.me/building_a_bubble_cloud.html
// http://vallandingham.me/gates_bubbles/

/**
 *
 */
var BubbleChart, root,
    __bind = function (fn, me) {
        return function () {
            return fn.apply(me, arguments);
        };
    };

/**
 *
 * @param data
 * @param categories
 * @constructor
 */
BubbleChart = function (data, categories) {
    this.hide_details = __bind(this.hide_details, this);
    this.show_details = __bind(this.show_details, this);
    this.hide_years = __bind(this.hide_years, this);
    this.display_years = __bind(this.display_years, this);
    this.move_towards_year = __bind(this.move_towards_year, this);
    this.display_by_year = __bind(this.display_by_year, this);
    this.move_towards_center = __bind(this.move_towards_center, this);
    this.display_group_all = __bind(this.display_group_all, this);
    this.start = __bind(this.start, this);
    this.create_vis = __bind(this.create_vis, this);
    this.create_nodes = __bind(this.create_nodes, this);
    var max_amount;
    this.data = data;
    this.width = 940;
    this.height = 600;
    this.tooltip = CustomTooltip("gates_tooltip", 240);
    this.center = {
        x: this.width / 2,
        y: this.height / 2
    };
    var cat1 = categories[0];
    var cat2 = categories[1];

    this.classes = [];
    this.classes[cat1] = "state1";
    this.classes[cat2] = "state2";

    this.stateNames  = [];
    var length = data.length;

    var found1 = false;
    var found2 = false;
    for (var i = 0; i < length; i++) {
        if (data[i].stateID === cat1) {
            this.stateNames[cat1] = data[i].stateName;
            found1 = true;
            if (found2) {
                break;
            }
        }
        if (data[i].stateID === cat2) {
            this.stateNames[cat2] = data[i].stateName;
            found2 = true;
            if (found1) {
                break;
            }
        }
    }

    this.year_centers = [];

    this.year_centers[cat1] = [];
    this.year_centers[cat1]["x"] = this.width / 3;
    this.year_centers[cat1]["y"] = this.height / 2;

    this.year_centers[cat2] = [];
    this.year_centers[cat2]["x"] = 2 * this.width / 3;
    this.year_centers[cat2]["y"] = this.height / 2;


    this.layout_gravity = -0.01;
    this.damper = 0.1;
    this.vis = null;
    this.nodes = [];
    this.force = null;
    this.circles = null;
    this.text = null;
    //this.fill_color = d3.scale.ordinal().domain(["low", "medium", "high"]).range(["#d84b2a", "#FFFA2D", "#7aa25c", "#819BFF", "#FF7DF5"]);
    this.fill_color = d3.scale.ordinal().range(["#deebf7", "#c6dbef", "#9ecae1", "#6baed6", "#4292c6"]);
    max_amount = d3.max(this.data, function (d) {
        return parseInt(d.population);
    });
    this.radius_scale = d3.scale.pow().exponent(0.5).domain([0, max_amount]).range([2, 85]);
    this.create_nodes();
    this.create_vis();
}

/**
 *
 * @returns {Array}
 */
BubbleChart.prototype.create_nodes = function () {
    this.data.forEach((function (_this) {
        return function (d) {
            var node;
            node = {
                id: d.id,
                radius: _this.radius_scale(parseInt(d.population)),
                value: d.population,
                name: d.stateName,
                category: d.category,
                year: d.stateID,
                x: Math.random() * 900,
                y: Math.random() * 800 ,
                percent: d.percent
            };

            return _this.nodes.push(node);
        };
    })(this));
    return this.nodes.sort(function (a, b) {
        return b.value - a.value;
    });
};

/**
 *
 * @returns {*}
 */
BubbleChart.prototype.create_vis = function () {
    var that;

    this.vis = d3.select("#vis").append("svg").attr("width", this.width).attr("height", this.height).attr("id", "svg_vis");
    this.circles = this.vis.selectAll("circle").data(this.nodes, function (d) {
        return d.id;
    });
    that = this;

    var nodes = this.circles.enter().append("circle").attr("r", 0).attr("fill", (function (_this) {
        return function (d) {
            return _this.fill_color(d.category);

        };
    })(this))
        .attr("stroke-width", 2)

        .attr("stroke", (function (_this) {
            return function (d) {
                return d3.rgb(_this.fill_color(d.category)).darker();
            };
        })(this))
        .attr("id", function (d) {
            return "bubble_" + d.id;
        })
        .attr("class", function (d) {
            return that.classes[d.year];
        })
        .on("mouseover", function (d, i) {
            return that.show_details(d, i, this);
        }).on("mouseout", function (d, i) {
            return that.hide_details(d, i, this);
        });

    //Add the SVG Text Element to the svgContainer
    this.text = this.vis.selectAll("text")
        .data(this.nodes)
        .enter()
        .append("text");

    //Add SVG Text Element Attributes
    var textLabels = this.text
        .attr("x", function (d) {
                return getX(d.x, that.center.x, that.damper, d.radius);
            }

    )
        .attr("y", function (d) {
                return getY(d.y, that.center.y, that.damper);
            }

    )
        .text(function (d) {
            return getText(d);
        })
        .attr("font-family", "sans-serif")
        .attr("font-size", "14px")
        .attr("id", function (d) {
            return "T" + d.id;
        }

    )
        .attr("class", function (d) {
            return that.classes[d.year];
        });


    return this.circles.transition().duration(2000).attr("r", function (d) {
        return d.radius;
    });
};

/**
 *
 * @param xVal
 * @param centerX
 * @param damper
 * @param radius
 * @returns {number}
 */
function getX(xVal, centerX, damper, radius) {

    var retVal = (xVal + (centerX - xVal) * (damper + 0.02)) - (radius);

    return   retVal;
}

/**
 *
 * @param yVal
 * @param centerY
 * @param damper
 * @returns {*}
 */
function getY(yVal, centerY, damper) {

    return   yVal + (centerY - yVal) * (damper + 0.02);
}

/**
 *
 * @param d
 * @returns {string}
 */
function getText(d) {
    return d.category + " (" + d.percent + "%)";
}

/**
 *
 * @param d
 * @returns {number}
 */
BubbleChart.prototype.charge = function (d) {
    return -Math.pow(d.radius, 2.0) / 8;
};

/**
 *
 * @returns {*}
 */
BubbleChart.prototype.start = function () {
    return this.force = d3.layout.force().nodes
    (this.nodes)

        .size([this.width, this.height]);

};

/**
 *
 * @returns {*}
 */
BubbleChart.prototype.display_group_all = function () {
    this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick",
        (function (_this) {
            return function (e) {
                return _this.circles.each(_this.move_towards_center(e.alpha)).attr("cx", function (d) {
                    return d.x;
                }).attr("cy", function (d) {
                    return d.y;
                });
            };
        })(this));
    this.force.start();
    return this.hide_years();
};

/**
 *
 * @param d
 * @param _this
 */
function updateTextPosition(d, _this) {

    var id = "#T" + d.id;

    $(id).attr("x", d.x - (d.radius/2)) ;
    $(id).attr("y", d.y) ;
}

/**
 *
 * @param alpha
 */
BubbleChart.prototype.move_towards_center = function (alpha) {
    return (function (_this) {
        return function (d) {
            d.x = d.x + (_this.center.x - d.x) * (_this.damper + 0.02) * alpha;

            d.y = d.y + (_this.center.y - d.y) * (_this.damper + 0.02) * alpha;
            updateTextPosition(d, _this);
        };
    })(this);
};

/**
 *
 * @param categories
 * @returns {*}
 */
BubbleChart.prototype.display_by_year = function (categories) {
    this.force.gravity(this.layout_gravity).charge(this.charge).friction(0.9).on("tick", (function (_this) {
        return function (e) {
            return _this.circles.each(_this.move_towards_year(e.alpha)).attr("cx", function (d) {
                return d.x;
            }).attr("cy", function (d) {
                return d.y;
            });
        };
    })(this));
    this.force.start();
    return this.display_years(categories);
};

/**
 *
 * @param alpha
 */
BubbleChart.prototype.move_towards_year = function (alpha) {
    return (function (_this) {
        return function (d) {
            var target;
            target = _this.year_centers[d.year];
            d.x = d.x + (target.x - d.x) * (_this.damper + 0.02) * alpha * 1.1;
            d.y = d.y + (target.y - d.y) * (_this.damper + 0.02) * alpha * 1.1;
            updateTextPosition(d, _this);

        };
    })(this);
};

/**
 *
 * @param categories
 * @returns {*|XMLList}
 */
BubbleChart.prototype.display_years = function (categories) {
    var years, years_data;
    var years_x = [];

    var cat1 = categories[0];
    var cat2 = categories[1];
    var names = [];
    names[0] = this.stateNames[cat1];
    names[1] = this.stateNames[cat2];
    years_x[names[0]] = 160;
    years_x[names[1]] = this.width - 160;
    years_data = d3.keys(years_x);


    years = this.vis.selectAll(".years").data(years_data);

    return years.enter().append("text").attr("class", "years").attr("x", (function (_this) {
        return function (d) {
            return years_x[d];
        };
    })(this)).attr("y", 40).attr("text-anchor", "middle").text(function (d) {
        return d;
    });
};

/**
 *
 * @returns {*}
 */
BubbleChart.prototype.hide_years = function () {
    var years;
    return years = this.vis.selectAll(".years").remove();
};

/**
 *
 * @param data
 * @param i
 * @param element
 * @returns {*}
 */
BubbleChart.prototype.show_details = function (data, i, element) {
    var content;
    d3.select(element).attr("stroke", "grey");
    content = "<span class=\"name\">Category:</span><span class=\"value\"> " + data.category + "</span><br/>";
    content += "<span class=\"name\">Population:</span><span class=\"value\">" + (addCommas(data.value)) + "</span><br/>";
    content += "<span class=\"name\">State:</span><span class=\"value\"> " + data.year + "</span><br/>";
    content += "<span class=\"name\">State Name:</span><span class=\"value\"> " + data.name + "</span><br/>";
    content += "<span class=\"name\">Percentage:</span><span class=\"value\"> " + data.percent + "</span>";
    return this.tooltip.showTooltip(content, d3.event);
};

/**
 *
 * @param data
 * @param i
 * @param element
 * @returns {*}
 */
BubbleChart.prototype.hide_details = function (data, i, element) {
    d3.select(element).attr("stroke", (function (_this) {
        return function (d) {
            return d3.rgb(_this.fill_color(d.category)).darker();
        };
    })(this));
    return this.tooltip.hideTooltip();
};








